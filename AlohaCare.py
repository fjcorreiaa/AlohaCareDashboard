{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1cWulzID5z5s7hYPsDi29JHVE5LOe0Pff",
      "authorship_tag": "ABX9TyOLwwm9rHl+xR0oJs/1a9y8"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "#Preparing the environment\n",
        "   \n",
        "*   Load data\n",
        "*   Import libraries\n",
        "*   Analyze missing data and adjustments\n",
        "\n",
        "\n",
        "   \n"
      ],
      "metadata": {
        "id": "frkGdWxPxQTB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.cluster import KMeans\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import gc  # Para coleta de lixo e otimização de memória\n",
        "from sklearn.decomposition import PCA\n"
      ],
      "metadata": {
        "id": "XDu0IvUIx1bI"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Dataset Members and Enrollment\n",
        "df_members = pd.read_csv('/content/drive/MyDrive/Lokahi_Innovation_in_Healthcare_Hackahton/df_final.csv')\n",
        "df = pd.read_csv('/content/drive/MyDrive/Lokahi_Innovation_in_Healthcare_Hackahton/Claims_Services/combined_data_services.csv', low_memory=False)\n",
        "\n"
      ],
      "metadata": {
        "id": "RPsuOkEB9ldc",
        "collapsed": true
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# keep only one line in df with the same PRIMARY_PERSON_KEY\n",
        "\n",
        "df = df.drop_duplicates(subset=['PRIMARY_PERSON_KEY'], keep='first')"
      ],
      "metadata": {
        "id": "uqFzXXorKCan"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# keep rows of column SV_STAT = P or D in df\n",
        "df = df[df['SV_STAT'].isin(['P', 'D'])]"
      ],
      "metadata": {
        "id": "vrDPfBNUzL5F"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Missing Data\n",
        "# Calculate the percentage of NaN values for each column in merged_df\n",
        "nan_percentages = df.isnull().sum() / len(df) * 100\n",
        "\n",
        "# Create a DataFrame from the percentages\n",
        "nan_percentage_df = pd.DataFrame({'Column': nan_percentages.index, 'NaN Percentage': nan_percentages.values})\n",
        "\n",
        "# Display the table with all rows\n",
        "pd.set_option(\"display.max_rows\", None)  # Show all rows\n",
        "print(nan_percentage_df)\n",
        "pd.reset_option(\"display.max_rows\")  # Reset to default\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "b7dJU0mIzteo",
        "outputId": "21cd7292-1f4c-45de-fd32-860b62516015"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                 Column  NaN Percentage\n",
            "0                    PRIMARY_PERSON_KEY        0.000000\n",
            "1                             MEMBER_ID        0.000000\n",
            "2                          CLAIM_ID_KEY        0.000000\n",
            "3                          SERVICE_LINE        0.000000\n",
            "4                               SV_STAT        0.000000\n",
            "5                         BILL_PROV_KEY        0.000000\n",
            "6                          REF_PROV_KEY        1.702704\n",
            "7                          ATT_PROV_KEY        0.000000\n",
            "8                                YEARMO        0.000000\n",
            "9                             FROM_DATE        0.000000\n",
            "10                              TO_DATE        0.000000\n",
            "11                            PAID_DATE        0.001998\n",
            "12                             ADM_DATE       98.457137\n",
            "13                             DIS_DATE       98.457137\n",
            "14                           AGE_ON_DOS        0.824779\n",
            "15                             RELATION        0.000000\n",
            "16                            PAYER_LOB        0.011588\n",
            "17                           PAYER_TYPE        0.011588\n",
            "18                             MEM_STAT       26.147957\n",
            "19                     CLAIM_IN_NETWORK       39.200157\n",
            "20                      SERVICE_SETTING        0.000000\n",
            "21                            FORM_TYPE        0.000000\n",
            "22                         UB_BILL_TYPE       87.101247\n",
            "23                                  POS       24.539159\n",
            "24                               MS_DRG       98.457137\n",
            "25                             REV_CODE       83.191941\n",
            "26                            PROC_CODE       29.546172\n",
            "27                            CPT_MOD_1       78.937778\n",
            "28                            CPT_MOD_2       97.709481\n",
            "29                              CPT_CCS        0.000000\n",
            "30                        CPT_CCS_LABEL       30.580342\n",
            "31                              ADM_SRC       89.191166\n",
            "32                             ADM_TYPE       89.044512\n",
            "33                             DIS_STAT       87.091257\n",
            "34                       ICD_DIAG_ADMIT       95.934050\n",
            "35                          ICD_DIAG_01       33.077455\n",
            "36                          ICD_DIAG_02       55.215405\n",
            "37                          ICD_DIAG_03       68.903372\n",
            "38                          ICD_DIAG_04       77.858453\n",
            "39                          ICD_DIAG_05       85.625117\n",
            "40                          ICD_DIAG_06       89.930829\n",
            "41                          ICD_DIAG_07       92.972999\n",
            "42                          ICD_DIAG_08       94.859120\n",
            "43                          ICD_DIAG_09       96.229755\n",
            "44                          ICD_DIAG_10       97.638352\n",
            "45                          ICD_DIAG_11       98.338055\n",
            "46                          ICD_DIAG_12       98.710085\n",
            "47                          ICD_DIAG_13       99.261136\n",
            "48                          ICD_DIAG_14       99.375022\n",
            "49                          ICD_DIAG_15       99.482915\n",
            "50                          ICD_DIAG_16       99.562436\n",
            "51                          ICD_DIAG_17       99.628370\n",
            "52                          ICD_DIAG_18       99.673925\n",
            "53                          ICD_DIAG_19       99.725873\n",
            "54                          ICD_DIAG_20       99.766632\n",
            "55                          ICD_DIAG_21       99.793006\n",
            "56                          ICD_DIAG_22       99.818181\n",
            "57                          ICD_DIAG_23       99.840559\n",
            "58                          ICD_DIAG_24       99.860539\n",
            "59                          ICD_DIAG_25       99.916084\n",
            "60                          ICD_DIAG_26       99.920879\n",
            "61                          ICD_DIAG_27       99.970030\n",
            "62                          ICD_DIAG_28       99.989211\n",
            "63                          ICD_DIAG_29       98.761234\n",
            "64                          ICD_DIAG_30       99.812986\n",
            "65                      ICD_DIAG_01_POA       77.661449\n",
            "66                      ICD_DIAG_02_POA       97.375814\n",
            "67                      ICD_DIAG_03_POA       98.153439\n",
            "68                      ICD_DIAG_04_POA       98.553441\n",
            "69                      ICD_DIAG_05_POA       98.897898\n",
            "70                      ICD_DIAG_06_POA       99.081315\n",
            "71                      ICD_DIAG_07_POA       99.230766\n",
            "72                      ICD_DIAG_08_POA       99.322675\n",
            "73                      ICD_DIAG_09_POA       99.433764\n",
            "74                      ICD_DIAG_10_POA       99.616382\n",
            "75                      ICD_DIAG_11_POA       99.701897\n",
            "76                      ICD_DIAG_12_POA       99.736662\n",
            "77                      ICD_DIAG_13_POA       99.771028\n",
            "78                      ICD_DIAG_14_POA       99.802597\n",
            "79                      ICD_DIAG_15_POA       99.824575\n",
            "80                      ICD_DIAG_16_POA       99.846952\n",
            "81                      ICD_DIAG_17_POA       99.866933\n",
            "82                      ICD_DIAG_18_POA       99.881318\n",
            "83                      ICD_DIAG_19_POA       99.899700\n",
            "84                      ICD_DIAG_20_POA       99.910090\n",
            "85                      ICD_DIAG_21_POA       99.920080\n",
            "86                      ICD_DIAG_22_POA       99.934465\n",
            "87                      ICD_DIAG_23_POA       99.941658\n",
            "88                      ICD_DIAG_24_POA       99.946853\n",
            "89                      ICD_DIAG_25_POA       99.973626\n",
            "90                      ICD_DIAG_26_POA      100.000000\n",
            "91                      ICD_DIAG_27_POA      100.000000\n",
            "92                      ICD_DIAG_28_POA      100.000000\n",
            "93                      ICD_DIAG_29_POA      100.000000\n",
            "94                      ICD_DIAG_30_POA      100.000000\n",
            "95                     ICD_PROC_CODE_01       98.971824\n",
            "96                     ICD_PROC_CODE_02       99.375022\n",
            "97                     ICD_PROC_CODE_03       99.603994\n",
            "98                     ICD_PROC_CODE_04       99.754644\n",
            "99                     ICD_PROC_CODE_05       99.844155\n",
            "100                    ICD_PROC_CODE_06       99.896103\n",
            "101                    ICD_PROC_CODE_07       99.948451\n",
            "102                    ICD_PROC_CODE_08       99.962437\n",
            "103                    ICD_PROC_CODE_09       99.971628\n",
            "104                    ICD_PROC_CODE_10       99.978421\n",
            "105                    ICD_PROC_CODE_11       99.982018\n",
            "106                    ICD_PROC_CODE_12       99.986813\n",
            "107                    ICD_PROC_CODE_13       99.990410\n",
            "108                    ICD_PROC_CODE_14       99.991209\n",
            "109                    ICD_PROC_CODE_15       99.993606\n",
            "110                    ICD_PROC_CODE_16       99.995205\n",
            "111                    ICD_PROC_CODE_17       99.995205\n",
            "112                    ICD_PROC_CODE_18       99.995604\n",
            "113                    ICD_PROC_CODE_19       99.996404\n",
            "114                    ICD_PROC_CODE_20       99.997203\n",
            "115                    ICD_PROC_CODE_21       99.998002\n",
            "116                    ICD_PROC_CODE_22       99.998002\n",
            "117                    ICD_PROC_CODE_23       99.998002\n",
            "118                    ICD_PROC_CODE_24       99.998002\n",
            "119                    ICD_PROC_CODE_25       99.998402\n",
            "120                    ICD_PROC_CODE_26      100.000000\n",
            "121                    ICD_PROC_CODE_27      100.000000\n",
            "122                    ICD_PROC_CODE_28      100.000000\n",
            "123                    ICD_PROC_CODE_29      100.000000\n",
            "124                    ICD_PROC_CODE_30      100.000000\n",
            "125                    DIAG_CCS_1_LABEL       36.023720\n",
            "126                    DIAG_CCS_2_LABEL       36.025319\n",
            "127                    DIAG_CCS_3_LABEL       36.025319\n",
            "128                            NDC_CODE       74.164133\n",
            "129                      RX_DAYS_SUPPLY        1.217587\n",
            "130                          RX_REFILLS        1.702704\n",
            "131                         RX_FILL_SRC       91.328637\n",
            "132                        RX_DRUG_COST        1.702704\n",
            "133                        RX_INGR_COST        1.218386\n",
            "134                    RX_QTY_DISPENSED       80.164157\n",
            "135                         RX_DISP_FEE        1.218386\n",
            "136                             RX_FORM       46.709877\n",
            "137                          AMT_BILLED        0.000000\n",
            "138                         AMT_ALLOWED        0.000000\n",
            "139                             AMT_COB        0.000000\n",
            "140                           AMT_COPAY        0.000000\n",
            "141                          AMT_DEDUCT        0.000000\n",
            "142                           AMT_COINS        0.000000\n",
            "143                            AMT_PAID        0.000000\n",
            "144                      AMT_DISALLOWED        0.000000\n",
            "145                            SV_UNITS        0.000000\n",
            "146    DIAGNOSTIC_CONDITION_CATEGORY_ID        4.093922\n",
            "147  DIAGNOSTIC_CONDITION_CATEGORY_DESC        4.093922\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Keep important columns in df, and with less missing\n",
        "columns_to_keep = [\n",
        "    \"PRIMARY_PERSON_KEY\", \"AGE_ON_DOS\", \"SV_STAT\", \"RELATION\", \"PAYER_LOB\", \"PAYER_TYPE\",\n",
        "    \"MEM_STAT\", \"SERVICE_SETTING\", \"FORM_TYPE\", \"PROC_CODE\",\n",
        "    \"ICD_DIAG_ADMIT\", \"RX_DRUG_COST\", \"RX_QTY_DISPENSED\",\n",
        "    \"AMT_BILLED\", \"AMT_PAID\",\n",
        "    \"DIAGNOSTIC_CONDITION_CATEGORY_ID\", \"DIAGNOSTIC_CONDITION_CATEGORY_DESC\", \"ICD_DIAG_ADMIT\", \"DIAG_CCS_1_LABEL\", \"CPT_CCS_LABEL\", \"ICD_DIAG_01\"\n",
        "]\n",
        "\n",
        "df2 = df[columns_to_keep]  # Manter apenas as colunas especificadas\n",
        "\n",
        "# Exibir as colunas do dataframe resultante\n",
        "print(f\"Colunas no dataframe filtrado: {df2.columns.tolist()}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Dp1FIWj1DRaT",
        "outputId": "05c7b565-ed6d-4e25-a94b-561079dab62d"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Colunas no dataframe filtrado: ['PRIMARY_PERSON_KEY', 'AGE_ON_DOS', 'SV_STAT', 'RELATION', 'PAYER_LOB', 'PAYER_TYPE', 'MEM_STAT', 'SERVICE_SETTING', 'FORM_TYPE', 'PROC_CODE', 'ICD_DIAG_ADMIT', 'RX_DRUG_COST', 'RX_QTY_DISPENSED', 'AMT_BILLED', 'AMT_PAID', 'DIAGNOSTIC_CONDITION_CATEGORY_ID', 'DIAGNOSTIC_CONDITION_CATEGORY_DESC', 'ICD_DIAG_ADMIT', 'DIAG_CCS_1_LABEL', 'CPT_CCS_LABEL', 'ICD_DIAG_01']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Remove rows where 'CPT_CCS_LABEL' is empty\n",
        "df2 = df2.dropna(subset=['CPT_CCS_LABEL'])"
      ],
      "metadata": {
        "id": "qz9X-S3-FeK4"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Join df_members and df members based on PRIMARY_PERSON_KEY\n",
        "\n",
        "# Merge the two dataframes based on 'PRIMARY_PERSON_KEY'\n",
        "merged_df = pd.merge(df_members, df2, on='PRIMARY_PERSON_KEY', how='left')\n",
        "\n",
        "# Display the first few rows of the merged dataframe\n",
        "merged_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "collapsed": true,
        "id": "_iQjJJ08GC0I",
        "outputId": "4b1e27b4-74a1-417a-ec09-db1e0937a8e7"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          PRIMARY_PERSON_KEY                MEMBER_ID_x MEM_GENDER_x  \\\n",
              "0  9D86A6B5CEE3D0C4244D0F450  9D86A6B5CEE3D0C4244D0F450            M   \n",
              "1  9D86E2E5B40DA246B4751E3D4  9D86E2E5B40DA246B4751E3D4            F   \n",
              "2  9D876E9ED9B92F01DAB86077D  9D876E9ED9B92F01DAB86077D            F   \n",
              "3  9D8771DD012044F3594FAFC39  9D8771DD012044F3594FAFC39            M   \n",
              "4  9D8795DD01CCFFB8334B6734A  9D8795DD01CCFFB8334B6734A            F   \n",
              "\n",
              "   MEM_RACE_x  MEM_ETHNICITY_x  MEM_ZIP3_x  \\\n",
              "0         NaN              NaN         968   \n",
              "1         NaN              NaN         941   \n",
              "2         3.0              2.0         941   \n",
              "3         NaN              NaN         968   \n",
              "4         4.0              2.0         941   \n",
              "\n",
              "                             MEM_MSA_NAME_x MEM_STATE_x MEM_AGE PAYER_LOB_x  \\\n",
              "0                        URBAN HONOLULU, HI          HI      23  COMMERCIAL   \n",
              "1  SAN FRANCISCO-SAN MATEO-REDWOOD CITY, CA          CA      43  COMMERCIAL   \n",
              "2  SAN FRANCISCO-SAN MATEO-REDWOOD CITY, CA          CA      12    MEDICAID   \n",
              "3                        URBAN HONOLULU, HI          HI      72    MEDICARE   \n",
              "4  SAN FRANCISCO-SAN MATEO-REDWOOD CITY, CA          CA      55    MEDICAID   \n",
              "\n",
              "   ...  RX_DRUG_COST RX_QTY_DISPENSED  AMT_BILLED    AMT_PAID  \\\n",
              "0  ...           NaN              NaN         NaN         NaN   \n",
              "1  ...           0.0              NaN  121.317281   73.068774   \n",
              "2  ...           0.0              NaN  310.457464  124.321739   \n",
              "3  ...           NaN              NaN         NaN         NaN   \n",
              "4  ...           0.0              NaN  351.496901   66.526910   \n",
              "\n",
              "   DIAGNOSTIC_CONDITION_CATEGORY_ID  DIAGNOSTIC_CONDITION_CATEGORY_DESC  \\\n",
              "0                               NaN                                 NaN   \n",
              "1                               NaN                                 NaN   \n",
              "2                              99.0                          NOT MAPPED   \n",
              "3                               NaN                                 NaN   \n",
              "4                              52.0                     OSTEO ARTHRITIS   \n",
              "\n",
              "   ICD_DIAG_ADMIT                                   DIAG_CCS_1_LABEL  \\\n",
              "0             NaN                                                NaN   \n",
              "1             NaN  SYMPTOMS; SIGNS; AND ILL-DEFINED CONDITIONS AN...   \n",
              "2             NaN                                     MENTAL ILLNESS   \n",
              "3             NaN                                                NaN   \n",
              "4             NaN  DISEASES OF THE MUSCULOSKELETAL SYSTEM AND CON...   \n",
              "\n",
              "                                       CPT_CCS_LABEL ICD_DIAG_01  \n",
              "0                                                NaN         NaN  \n",
              "1                                        MAMMOGRAPHY       Z1231  \n",
              "2  PSYCHOLOGICAL AND PSYCHIATRIC EVALUATION AND T...       F4323  \n",
              "3                                                NaN         NaN  \n",
              "4    CONSULTATION, EVALUATION, AND PREVENTATIVE CARE      M47817  \n",
              "\n",
              "[5 rows x 39 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8172b0b5-8117-430f-97c7-541a99fa08ea\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PRIMARY_PERSON_KEY</th>\n",
              "      <th>MEMBER_ID_x</th>\n",
              "      <th>MEM_GENDER_x</th>\n",
              "      <th>MEM_RACE_x</th>\n",
              "      <th>MEM_ETHNICITY_x</th>\n",
              "      <th>MEM_ZIP3_x</th>\n",
              "      <th>MEM_MSA_NAME_x</th>\n",
              "      <th>MEM_STATE_x</th>\n",
              "      <th>MEM_AGE</th>\n",
              "      <th>PAYER_LOB_x</th>\n",
              "      <th>...</th>\n",
              "      <th>RX_DRUG_COST</th>\n",
              "      <th>RX_QTY_DISPENSED</th>\n",
              "      <th>AMT_BILLED</th>\n",
              "      <th>AMT_PAID</th>\n",
              "      <th>DIAGNOSTIC_CONDITION_CATEGORY_ID</th>\n",
              "      <th>DIAGNOSTIC_CONDITION_CATEGORY_DESC</th>\n",
              "      <th>ICD_DIAG_ADMIT</th>\n",
              "      <th>DIAG_CCS_1_LABEL</th>\n",
              "      <th>CPT_CCS_LABEL</th>\n",
              "      <th>ICD_DIAG_01</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>9D86A6B5CEE3D0C4244D0F450</td>\n",
              "      <td>9D86A6B5CEE3D0C4244D0F450</td>\n",
              "      <td>M</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>968</td>\n",
              "      <td>URBAN HONOLULU, HI</td>\n",
              "      <td>HI</td>\n",
              "      <td>23</td>\n",
              "      <td>COMMERCIAL</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>9D86E2E5B40DA246B4751E3D4</td>\n",
              "      <td>9D86E2E5B40DA246B4751E3D4</td>\n",
              "      <td>F</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>941</td>\n",
              "      <td>SAN FRANCISCO-SAN MATEO-REDWOOD CITY, CA</td>\n",
              "      <td>CA</td>\n",
              "      <td>43</td>\n",
              "      <td>COMMERCIAL</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>121.317281</td>\n",
              "      <td>73.068774</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>SYMPTOMS; SIGNS; AND ILL-DEFINED CONDITIONS AN...</td>\n",
              "      <td>MAMMOGRAPHY</td>\n",
              "      <td>Z1231</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>9D876E9ED9B92F01DAB86077D</td>\n",
              "      <td>9D876E9ED9B92F01DAB86077D</td>\n",
              "      <td>F</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>941</td>\n",
              "      <td>SAN FRANCISCO-SAN MATEO-REDWOOD CITY, CA</td>\n",
              "      <td>CA</td>\n",
              "      <td>12</td>\n",
              "      <td>MEDICAID</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>310.457464</td>\n",
              "      <td>124.321739</td>\n",
              "      <td>99.0</td>\n",
              "      <td>NOT MAPPED</td>\n",
              "      <td>NaN</td>\n",
              "      <td>MENTAL ILLNESS</td>\n",
              "      <td>PSYCHOLOGICAL AND PSYCHIATRIC EVALUATION AND T...</td>\n",
              "      <td>F4323</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>9D8771DD012044F3594FAFC39</td>\n",
              "      <td>9D8771DD012044F3594FAFC39</td>\n",
              "      <td>M</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>968</td>\n",
              "      <td>URBAN HONOLULU, HI</td>\n",
              "      <td>HI</td>\n",
              "      <td>72</td>\n",
              "      <td>MEDICARE</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>9D8795DD01CCFFB8334B6734A</td>\n",
              "      <td>9D8795DD01CCFFB8334B6734A</td>\n",
              "      <td>F</td>\n",
              "      <td>4.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>941</td>\n",
              "      <td>SAN FRANCISCO-SAN MATEO-REDWOOD CITY, CA</td>\n",
              "      <td>CA</td>\n",
              "      <td>55</td>\n",
              "      <td>MEDICAID</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>351.496901</td>\n",
              "      <td>66.526910</td>\n",
              "      <td>52.0</td>\n",
              "      <td>OSTEO ARTHRITIS</td>\n",
              "      <td>NaN</td>\n",
              "      <td>DISEASES OF THE MUSCULOSKELETAL SYSTEM AND CON...</td>\n",
              "      <td>CONSULTATION, EVALUATION, AND PREVENTATIVE CARE</td>\n",
              "      <td>M47817</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 39 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8172b0b5-8117-430f-97c7-541a99fa08ea')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8172b0b5-8117-430f-97c7-541a99fa08ea button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8172b0b5-8117-430f-97c7-541a99fa08ea');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-965af065-7541-4092-8330-4d13fef6b475\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-965af065-7541-4092-8330-4d13fef6b475')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-965af065-7541-4092-8330-4d13fef6b475 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "merged_df"
            }
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Remove columns 'PRIMARY_PERSON_KEY' and 'MEMBER_ID_x'\n",
        "merged_df = merged_df.drop(columns=['PRIMARY_PERSON_KEY', 'MEMBER_ID_x'], errors='ignore')\n"
      ],
      "metadata": {
        "id": "jI60tc1bISBO"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Adding new variables based on those obtained in df_merged"
      ],
      "metadata": {
        "id": "mehhk_kWIoDd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Generate the GROUP_COST column, to identify people with low, medium and high expenses. Values ​​based on the 25%, 50% and 75% percentiles\n",
        "\n",
        "def classify_cost_numeric(amt):\n",
        "    if amt <= 71:\n",
        "        return 1  # Low spend\n",
        "    elif 71 < amt < 194:\n",
        "        return 2  # Medium spend\n",
        "    else:\n",
        "        return 3  # High spend\n",
        "\n",
        "# Mapeamento para rótulos\n",
        "label_mapping = {\n",
        "    1: \"Low spend\",\n",
        "    2: \"Medium spend\",\n",
        "    3: \"High spend\"\n",
        "}\n",
        "\n",
        "# Gerar a coluna numérica GRUPO_CUSTO\n",
        "merged_df[\"GROUP_COST\"] = merged_df[\"AMT_BILLED\"].apply(classify_cost_numeric)\n",
        "\n",
        "# Adicionar a coluna de rótulos LABEL_GRUPO_CUSTO\n",
        "merged_df[\"LABEL_GROUP_COST\"] = merged_df[\"GROUP_COST\"].map(label_mapping)\n",
        "\n"
      ],
      "metadata": {
        "id": "rgeBMa39I17n"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Get table from https://raw.githubusercontent.com/k4m1113/ICD-10-CSV/master/categories.csv\n",
        "# do not add first line as table name. Column 1= ICD, Column 2=Description\n",
        "\n",
        "import pandas as pd\n",
        "\n",
        "# URL do arquivo CSV\n",
        "url = 'https://raw.githubusercontent.com/k4m1113/ICD-10-CSV/master/categories.csv'\n",
        "\n",
        "# Ler o arquivo CSV diretamente da URL, pulando a primeira linha (cabeçalho)\n",
        "icd_df = pd.read_csv(url, skiprows=1, header=None, names=['ICD', 'Description'])\n",
        "\n",
        "# Exibir o DataFrame\n",
        "icd_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "collapsed": true,
        "id": "EnJIzYv1O9Xd",
        "outputId": "9373641c-8374-4f5f-a52b-9e1bad668de8"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        ICD                                        Description\n",
              "0       A01                     Typhoid and paratyphoid fevers\n",
              "1      A010                                      Typhoid fever\n",
              "2      A011                                Paratyphoid fever A\n",
              "3      A012                                Paratyphoid fever B\n",
              "4      A013                                Paratyphoid fever C\n",
              "...     ...                                                ...\n",
              "24622   Z99  Dependence on enabling machines and devices, n...\n",
              "24623  Z991                           Dependence on respirator\n",
              "24624  Z992                       Dependence on renal dialysis\n",
              "24625  Z993                           Dependence on wheelchair\n",
              "24626  Z998  Dependence on other enabling machines and devices\n",
              "\n",
              "[24627 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e2fff8c0-fca2-4c9d-a0ea-9e1dcd27f2d7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ICD</th>\n",
              "      <th>Description</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>A01</td>\n",
              "      <td>Typhoid and paratyphoid fevers</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>A010</td>\n",
              "      <td>Typhoid fever</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>A011</td>\n",
              "      <td>Paratyphoid fever A</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>A012</td>\n",
              "      <td>Paratyphoid fever B</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>A013</td>\n",
              "      <td>Paratyphoid fever C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24622</th>\n",
              "      <td>Z99</td>\n",
              "      <td>Dependence on enabling machines and devices, n...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24623</th>\n",
              "      <td>Z991</td>\n",
              "      <td>Dependence on respirator</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24624</th>\n",
              "      <td>Z992</td>\n",
              "      <td>Dependence on renal dialysis</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24625</th>\n",
              "      <td>Z993</td>\n",
              "      <td>Dependence on wheelchair</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24626</th>\n",
              "      <td>Z998</td>\n",
              "      <td>Dependence on other enabling machines and devices</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>24627 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e2fff8c0-fca2-4c9d-a0ea-9e1dcd27f2d7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e2fff8c0-fca2-4c9d-a0ea-9e1dcd27f2d7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e2fff8c0-fca2-4c9d-a0ea-9e1dcd27f2d7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b58dd942-9dc7-4aea-9550-afc03ec255ab\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b58dd942-9dc7-4aea-9550-afc03ec255ab')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b58dd942-9dc7-4aea-9550-afc03ec255ab button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_9ea703e5-6472-4748-aa57-d32b47e1e585\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('icd_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_9ea703e5-6472-4748-aa57-d32b47e1e585 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('icd_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "icd_df",
              "summary": "{\n  \"name\": \"icd_df\",\n  \"rows\": 24627,\n  \"fields\": [\n    {\n      \"column\": \"ICD\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 24627,\n        \"samples\": [\n          \"T508\",\n          \"S6303\",\n          \"S2090\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Description\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 24185,\n        \"samples\": [\n          \"Dentofacial anomaly, unspecified\",\n          \"Rheumatoid bursitis\",\n          \"Traumatic rupture of symphysis pubis\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Perform the merge to add the descriptions\n",
        "merged_df = merged_df.merge(icd_df, left_on=\"ICD_DIAG_01\", right_on=\"ICD\", how=\"left\")\n",
        "merged_df[\"Description\"] = merged_df[\"Description\"].fillna(\"Código inválido\")\n",
        "merged_df.drop(columns=[\"ICD\"], inplace=True)"
      ],
      "metadata": {
        "id": "PAlkiGWpTpdb"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: CRIAR FAMILIA_CID  COM BASE NAS 3 PRIMEIRAS linhas de ICD_DIAG_01\n",
        "\n",
        "# Extract the first three characters of 'ICD_DIAG_01'\n",
        "merged_df['FAMILIA_CID'] = merged_df['ICD_DIAG_01'].str[:3]"
      ],
      "metadata": {
        "id": "xSoHLiV8a6Wj"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Remove columns 'PRIMARY_PERSON_KEY', 'MEMBER_ID_x', and 'MEM_ZIP3'\n",
        "merged_df = merged_df.drop(columns=['PRIMARY_PERSON_KEY', 'MEMBER_ID_x', 'MEM_ZIP3_x', 'MEM_ZIP3_y'], errors='ignore')\n"
      ],
      "metadata": {
        "id": "HBS8ZqzRXWCR"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Transformar as colunas em categóricas mantendo os valores ausentes\n",
        "categorical_columns = [\"MEM_RACE_x\", \"MEM_ETHNICITY_x\"]\n",
        "for col in categorical_columns:\n",
        "    merged_df[col] = merged_df[col].astype(\"category\")\n",
        "\n",
        "# Exibir informações das colunas para verificar\n",
        "print(\"Informações do DataFrame:\")\n",
        "print(merged_df.info())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "ueJfyyiFZax5",
        "outputId": "77af4d1b-f279-4375-dced-98d11791cc63"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Informações do DataFrame:\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 559446 entries, 0 to 559445\n",
            "Data columns (total 39 columns):\n",
            " #   Column                                 Non-Null Count   Dtype   \n",
            "---  ------                                 --------------   -----   \n",
            " 0   MEM_GENDER_x                           553118 non-null  object  \n",
            " 1   MEM_RACE_x                             268046 non-null  category\n",
            " 2   MEM_ETHNICITY_x                        245815 non-null  category\n",
            " 3   MEM_MSA_NAME_x                         559446 non-null  object  \n",
            " 4   MEM_STATE_x                            559446 non-null  object  \n",
            " 5   MEM_AGE                                551585 non-null  object  \n",
            " 6   PAYER_LOB_x                            557711 non-null  object  \n",
            " 7   PRIMARY_CHRONIC_CONDITION_ROLLUP_ID    544770 non-null  float64 \n",
            " 8   PRIMARY_CHRONIC_CONDITION_ROLLUP_DESC  544770 non-null  object  \n",
            " 9   MEMBER_ID_y                            559446 non-null  object  \n",
            " 10  MEM_GENDER_y                           553118 non-null  object  \n",
            " 11  MEM_RACE_y                             268046 non-null  float64 \n",
            " 12  MEM_ETHNICITY_y                        245815 non-null  float64 \n",
            " 13  MEM_MSA_NAME_y                         559446 non-null  object  \n",
            " 14  MEM_STATE_y                            559446 non-null  object  \n",
            " 15  AGE_ON_DOS                             172160 non-null  object  \n",
            " 16  SV_STAT                                173722 non-null  object  \n",
            " 17  RELATION                               173722 non-null  object  \n",
            " 18  PAYER_LOB_y                            173708 non-null  object  \n",
            " 19  PAYER_TYPE                             173708 non-null  object  \n",
            " 20  MEM_STAT                               133124 non-null  object  \n",
            " 21  SERVICE_SETTING                        173722 non-null  object  \n",
            " 22  FORM_TYPE                              173722 non-null  object  \n",
            " 23  PROC_CODE                              173722 non-null  object  \n",
            " 24  ICD_DIAG_ADMIT                         7167 non-null    object  \n",
            " 25  RX_DRUG_COST                           170783 non-null  float64 \n",
            " 26  RX_QTY_DISPENSED                       0 non-null       float64 \n",
            " 27  AMT_BILLED                             173722 non-null  float64 \n",
            " 28  AMT_PAID                               173722 non-null  float64 \n",
            " 29  DIAGNOSTIC_CONDITION_CATEGORY_ID       166937 non-null  float64 \n",
            " 30  DIAGNOSTIC_CONDITION_CATEGORY_DESC     166937 non-null  object  \n",
            " 31  ICD_DIAG_ADMIT                         7167 non-null    object  \n",
            " 32  DIAG_CCS_1_LABEL                       150487 non-null  object  \n",
            " 33  CPT_CCS_LABEL                          173722 non-null  object  \n",
            " 34  ICD_DIAG_01                            157037 non-null  object  \n",
            " 35  GROUP_COST                             559446 non-null  int64   \n",
            " 36  LABEL_GROUP_COST                       559446 non-null  object  \n",
            " 37  Description                            559446 non-null  object  \n",
            " 38  FAMILIA_CID                            157037 non-null  object  \n",
            "dtypes: category(2), float64(8), int64(1), object(28)\n",
            "memory usage: 159.0+ MB\n",
            "None\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Remove columns 'MEM_RACE_y', 'MEM_ETHNICITY_y', 'MEMBER_ID_y', 'MEM_MSA_NAME_y', 'MEM_STATE_y', and 'PAYER_LOB_y'\n",
        "merged_df = merged_df.drop(columns=['MEM_RACE_y', 'MEM_ETHNICITY_y', 'MEMBER_ID_y', 'MEM_MSA_NAME_y', 'MEM_STATE_y', 'PAYER_LOB_y', 'MEM_GENDER_y'], errors='ignore')"
      ],
      "metadata": {
        "id": "qp3UCI3abSyT"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert 'MEM_AGE' and 'AGE_ON_DOS' to numeric, handling errors\n",
        "merged_df['MEM_AGE'] = pd.to_numeric(merged_df['MEM_AGE'], errors='coerce')\n",
        "merged_df['AGE_ON_DOS'] = pd.to_numeric(merged_df['AGE_ON_DOS'], errors='coerce')"
      ],
      "metadata": {
        "id": "lLwIpUeNe_a2"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: gera CAtegorias de idade em merge_df com base em AGE_ON_DOS, considerar as categorias até 18 anos, 18 a 60 anos, 60 anos ou mais\n",
        "\n",
        "def categorize_age(age):\n",
        "    if age < 18:\n",
        "        return '0-18'\n",
        "    elif 18 < age < 60:\n",
        "        return '18-60'\n",
        "    else:\n",
        "        return '60+'\n",
        "\n",
        "merged_df['AGE_CATEGORY'] = merged_df['AGE_ON_DOS'].apply(categorize_age)"
      ],
      "metadata": {
        "id": "Y2DseeKID0u-"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Initial description of numerical and categorical variables"
      ],
      "metadata": {
        "id": "DFNu0KhXVZ4D"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "numeric_vars = [ 'RX_DRUG_COST',\n",
        " 'AMT_BILLED',\n",
        " 'AMT_PAID',\n",
        " 'GROUP_COST',\n",
        " 'AGE_ON_DOS', 'MEM_AGE']\n",
        "\n",
        "categorical_vars = [\n",
        "    \"MEM_GENDER_x\", \"MEM_RACE_x\", \"PAYER_LOB_x\", \"SV_STAT\", \"RELATION\",\n",
        "    \"SERVICE_SETTING\", \"DIAGNOSTIC_CONDITION_CATEGORY_DESC\", \"CPT_CCS_LABEL\", \"LABEL_GROUP_COST\", \"FAMILIA_CID\", \"AGE_CATEGORY\"\n",
        "]\n"
      ],
      "metadata": {
        "id": "oOAoJUAqV1r6"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for col in categorical_vars:\n",
        "    if col in merged_df.columns:  # Verifica se a coluna existe no DataFrame\n",
        "        merged_df[col] = merged_df[col].astype(\"category\")"
      ],
      "metadata": {
        "id": "CjQJP8BEn9qk"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Summary of numerical variables\n",
        "\n",
        "for var in numeric_vars:\n",
        "  print(f\"Summary for {var}:\")\n",
        "  print(merged_df[var].describe())\n",
        "  print(\"-\" * 20)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "NGp_JE6dhoxI",
        "outputId": "40b93b81-04a5-4429-cb45-cc87112f7813"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Summary for RX_DRUG_COST:\n",
            "count    170783.0\n",
            "mean          0.0\n",
            "std           0.0\n",
            "min           0.0\n",
            "25%           0.0\n",
            "50%           0.0\n",
            "75%           0.0\n",
            "max           0.0\n",
            "Name: RX_DRUG_COST, dtype: float64\n",
            "--------------------\n",
            "Summary for AMT_BILLED:\n",
            "count    173722.000000\n",
            "mean        242.780370\n",
            "std        1303.197032\n",
            "min      -63949.433712\n",
            "25%          26.369428\n",
            "50%          83.675538\n",
            "75%         196.700818\n",
            "max      140044.012358\n",
            "Name: AMT_BILLED, dtype: float64\n",
            "--------------------\n",
            "Summary for AMT_PAID:\n",
            "count    173722.000000\n",
            "mean         61.711667\n",
            "std         389.624694\n",
            "min      -26174.031508\n",
            "25%           0.000000\n",
            "50%          14.172675\n",
            "75%          64.970925\n",
            "max       54085.877243\n",
            "Name: AMT_PAID, dtype: float64\n",
            "--------------------\n",
            "Summary for GROUP_COST:\n",
            "count    559446.000000\n",
            "mean          2.627158\n",
            "std           0.718991\n",
            "min           1.000000\n",
            "25%           3.000000\n",
            "50%           3.000000\n",
            "75%           3.000000\n",
            "max           3.000000\n",
            "Name: GROUP_COST, dtype: float64\n",
            "--------------------\n",
            "Summary for AGE_ON_DOS:\n",
            "count    170500.000000\n",
            "mean         39.867736\n",
            "std          23.178377\n",
            "min           0.000000\n",
            "25%          20.000000\n",
            "50%          40.000000\n",
            "75%          59.000000\n",
            "max          88.000000\n",
            "Name: AGE_ON_DOS, dtype: float64\n",
            "--------------------\n",
            "Summary for MEM_AGE:\n",
            "count    547398.000000\n",
            "mean         37.085380\n",
            "std          22.068526\n",
            "min           0.000000\n",
            "25%          19.000000\n",
            "50%          35.000000\n",
            "75%          55.000000\n",
            "max          88.000000\n",
            "Name: MEM_AGE, dtype: float64\n",
            "--------------------\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate percentage of each category in categorical variables\n",
        "for col in categorical_vars:\n",
        "    print(f\"\\nPercentage distribution for {col}:\")\n",
        "    print(merged_df[col].value_counts(normalize=True) * 100)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "oGSKRxw4b2wK",
        "outputId": "a6adc15f-3f25-498a-895a-3ab3dca87c85"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Percentage distribution for MEM_GENDER_x:\n",
            "MEM_GENDER_x\n",
            "F    52.688215\n",
            "M    47.311785\n",
            "Name: proportion, dtype: float64\n",
            "\n",
            "Percentage distribution for MEM_RACE_x:\n",
            "MEM_RACE_x\n",
            "4.0    71.102721\n",
            "3.0    19.661178\n",
            "2.0     7.658387\n",
            "1.0     1.577714\n",
            "Name: proportion, dtype: float64\n",
            "\n",
            "Percentage distribution for PAYER_LOB_x:\n",
            "PAYER_LOB_x\n",
            "COMMERCIAL             50.994511\n",
            "MEDICAID               40.241451\n",
            "MEDICARE                6.355442\n",
            "MEDICARE SUPPLEMENT     2.408595\n",
            "Name: proportion, dtype: float64\n",
            "\n",
            "Percentage distribution for SV_STAT:\n",
            "SV_STAT\n",
            "P    93.65941\n",
            "D     6.34059\n",
            "Name: proportion, dtype: float64\n",
            "\n",
            "Percentage distribution for RELATION:\n",
            "RELATION\n",
            "SUBSCRIBER    50.987209\n",
            "UNKNOWN       24.606555\n",
            "DEPENDENT     17.254004\n",
            "SPOUSE         7.152232\n",
            "Name: proportion, dtype: float64\n",
            "\n",
            "Percentage distribution for SERVICE_SETTING:\n",
            "SERVICE_SETTING\n",
            "PROFESSIONAL    59.362084\n",
            "OTHER           20.490208\n",
            "OUTPATIENT      20.129863\n",
            "INPATIENT        0.017845\n",
            "Name: proportion, dtype: float64\n",
            "\n",
            "Percentage distribution for DIAGNOSTIC_CONDITION_CATEGORY_DESC:\n",
            "DIAGNOSTIC_CONDITION_CATEGORY_DESC\n",
            "NOT MAPPED                                                41.658829\n",
            "QUESTIONABLE                                              39.156688\n",
            "OBESITY                                                    1.956427\n",
            "DEPRESSION                                                 1.643135\n",
            "TYPE 2 DIABETES                                            1.602401\n",
            "                                                            ...    \n",
            "OTHER ENDOCRINE AND METABOLIC DISORDERS IN CHILDHOOD\\n     0.007188\n",
            "POST TRAUMA CHRONIC CONDITION                              0.007188\n",
            "CATARACT                                                   0.001797\n",
            "CYSTIC FIBROSIS                                            0.001198\n",
            "OTHER CHRONIC CONDITIONS                                   0.000599\n",
            "Name: proportion, Length: 71, dtype: float64\n",
            "\n",
            "Percentage distribution for CPT_CCS_LABEL:\n",
            "CPT_CCS_LABEL\n",
            "CONSULTATION, EVALUATION, AND PREVENTATIVE CARE                   20.595549\n",
            "LABORATORY - CHEMISTRY AND HEMATOLOGY                             11.351470\n",
            "HCPCS LEVEL II CODES NOT CLASSIFIED                               10.032120\n",
            "OTHER LABORATORY                                                   5.644651\n",
            "MICROSCOPIC EXAMINATION (BACTERIAL SMEAR, CULTURE, TOXICOLOGY)     4.766236\n",
            "                                                                    ...    \n",
            "OPEN PROSTATECTOMY                                                 0.000576\n",
            "COLORECTAL RESECTION                                               0.000576\n",
            "OTHER NON-OR UPPER GI THERAPEUTIC PROCEDURES                       0.000576\n",
            "CORONARY ARTERY BYPASS GRAFT (CABG)                                0.000576\n",
            "OTHER NON-OR GASTROINTESTINAL THERAPEUTIC PROCEDURES               0.000576\n",
            "Name: proportion, Length: 211, dtype: float64\n",
            "\n",
            "Percentage distribution for LABEL_GROUP_COST:\n",
            "LABEL_GROUP_COST\n",
            "High spend      76.871584\n",
            "Low spend       14.155790\n",
            "Medium spend     8.972626\n",
            "Name: proportion, dtype: float64\n",
            "\n",
            "Percentage distribution for FAMILIA_CID:\n",
            "FAMILIA_CID\n",
            "Z00    10.463776\n",
            "M25     2.615307\n",
            "E11     2.525519\n",
            "I10     2.509600\n",
            "M54     2.403255\n",
            "         ...    \n",
            "L59     0.000637\n",
            "L52     0.000637\n",
            "K95     0.000637\n",
            "T49     0.000637\n",
            "A01     0.000637\n",
            "Name: proportion, Length: 1278, dtype: float64\n",
            "\n",
            "Percentage distribution for AGE_CATEGORY:\n",
            "AGE_CATEGORY\n",
            "60+      77.503101\n",
            "18-60    15.785259\n",
            "0-18      6.711640\n",
            "Name: proportion, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: criar novo df com base em merged_df que exclua as linhas de DIAGNOSTIC_CONDITION_CATEGORY_DESC que contenha \"NOT MAPPED \" e  \"QUESTIONABLE\"\n",
        "\n",
        "# Create a new DataFrame excluding rows wit\n",
        "df_final = merged_df[\n",
        "    ~merged_df[\"DIAGNOSTIC_CONDITION_CATEGORY_DESC\"].str.contains(\"NOT MAPPED|QUESTIONABLE\", na=False)\n",
        "]"
      ],
      "metadata": {
        "id": "ut-N0CrD1CHE"
      },
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: remover merged_df, df df2\n",
        "\n",
        "del merged_df\n",
        "del df\n",
        "del df2\n",
        "gc.collect() #Force garbage collection"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YPhnmi1jPecV",
        "outputId": "9f252a25-71d3-4144-92bf-4620bd4e68a1"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Clusters"
      ],
      "metadata": {
        "id": "iZnc_OCJlYa6"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "FABce7z2ujjf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.impute import SimpleImputer\n"
      ],
      "metadata": {
        "id": "vxFf9Q3_D5Lb"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "numeric_data = df_final[numeric_vars]\n",
        "\n",
        "# Step 2: Handle missing values (Imputation)\n",
        "imputer = SimpleImputer(strategy=\"mean\")\n",
        "\n",
        "# Imputar valores ausentes\n",
        "numeric_data_imputed = pd.DataFrame(\n",
        "    imputer.fit_transform(numeric_data),  # Imputação\n",
        "    columns=numeric_data.columns,  # Manter os nomes das colunas\n",
        "    index=numeric_data.index       # Manter os índices originais\n",
        ")\n",
        "\n",
        "# Substituir os dados originais no DataFrame final\n",
        "df_final[numeric_vars] = numeric_data_imputed"
      ],
      "metadata": {
        "id": "GH994I3KECu_"
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def fill_missing_with_multiple_modes(df_final, categorical_vars, max_modes=15):\n",
        "    for col in categorical_vars:\n",
        "        # Obter até max_modes valores de moda\n",
        "        modes = df_final[col].mode().iloc[:max_modes]\n",
        "        missing_indices = df_final[col].isna()\n",
        "\n",
        "        # Preencher os valores ausentes iterativamente com as modas\n",
        "        for mode in modes:\n",
        "            if missing_indices.sum() == 0:  # Verifica se não há mais valores ausentes\n",
        "                break\n",
        "            df_final.loc[missing_indices, col] = mode\n",
        "            missing_indices = df_final[col].isna()  # Atualizar os índices ausentes\n",
        "    return df_final\n",
        "df_final = fill_missing_with_multiple_modes(df_final, categorical_vars, max_modes=15)\n"
      ],
      "metadata": {
        "id": "F76zMHwDL9FG"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for col in categorical_vars:\n",
        "    if col in df_final.columns:  # Verifica se a coluna existe no DataFrame\n",
        "        df_final[col] = df_final[col].astype(\"category\")"
      ],
      "metadata": {
        "id": "YB0nndCokEAO"
      },
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.cluster import KMeans\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# 1. Pré-processamento: Codificar variáveis categóricas\n",
        "df_encoded = pd.get_dummies(df_final, columns=categorical_vars, drop_first=True)\n",
        "\n",
        "# 2. Garantir que variáveis numéricas estão em df_encoded\n",
        "for col in numeric_vars:\n",
        "    if col not in df_encoded.columns:\n",
        "        df_encoded[col] = df_final[col]\n",
        "\n",
        "#garantir vars\n",
        "\n",
        "# Assuming df_final is your DataFrame and df_encoded will be the new one\n",
        "df_encoded = df_final[categorical_vars + numeric_vars].copy()\n",
        "\n",
        "\n",
        "# 3. Escalar as variáveis numéricas\n",
        "numeric_data = df_encoded[numeric_vars]\n",
        "scaler = StandardScaler()\n",
        "scaled_data = scaler.fit_transform(numeric_data)\n",
        "\n",
        "# 4. Aplicar o K-Means\n",
        "kmeans = KMeans(n_clusters=2, random_state=42)\n",
        "df_encoded[\"Cluster\"] = kmeans.fit_predict(scaled_data)\n",
        "\n",
        "# 5. Adicionar os clusters ao dataframe original\n",
        "df_final[\"Cluster\"] = df_encoded[\"Cluster\"]\n",
        "\n",
        "# 6. Visualização dos clusters\n",
        "plt.figure(figsize=(10, 7))\n",
        "sns.scatterplot(\n",
        "    x=\"AGE_ON_DOS\",  # Nome da coluna deve estar correto\n",
        "    y=\"AMT_BILLED\",  # Nome da coluna deve estar correto\n",
        "    hue=\"Cluster\",\n",
        "    data=df_final,\n",
        "    palette=\"Set2\",\n",
        "    style=\"Cluster\"\n",
        ")\n",
        "plt.title(\"Clusters Formados pelo K-Means\")\n",
        "plt.xlabel(\"Age\")  # Rotular corretamente\n",
        "plt.ylabel(\"Billed Amount\")  # Rotular corretamente\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 625
        },
        "id": "nOQOvr7zyhMN",
        "outputId": "a31b6aa2-1e85-4aa5-da16-e9d1e230a998"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x700 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# 6. Analisar os clusters\n",
        "print(\"Número de amostras por cluster:\")\n",
        "print(df_final[\"Cluster\"].value_counts())\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "oDF2ALdRFSuj",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e386b1ef-1782-4c83-fccc-8b7acee23978"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Número de amostras por cluster:\n",
            "Cluster\n",
            "0    424512\n",
            "1        23\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mean_by_cluster = df_final.groupby(\"Cluster\")[numeric_vars].mean()\n",
        "\n",
        "# Exibir o resultado\n",
        "print(\"\\nMédia de cada variável por cluster:\")\n",
        "print(mean_by_cluster)"
      ],
      "metadata": {
        "id": "hF-vIOg0zNeF",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "baef15f5-5a73-4851-a5c4-3599f009246e"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Média de cada variável por cluster:\n",
            "         RX_DRUG_COST    AMT_BILLED      AMT_PAID  GROUP_COST  AGE_ON_DOS  \\\n",
            "Cluster                                                                     \n",
            "0                 0.0    257.799517     69.962252    2.900003   40.332577   \n",
            "1                 0.0  43017.566626  12356.335179    2.913043   48.623175   \n",
            "\n",
            "           MEM_AGE  \n",
            "Cluster             \n",
            "0        36.221319  \n",
            "1        48.618347  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cross_tabs = {}\n",
        "for var in categorical_vars:\n",
        "    cross_tabs[var] = pd.crosstab(df_final[\"Cluster\"], df_final[var])\n",
        "\n",
        "# Display cross-tabulations\n",
        "for var, crosstab in cross_tabs.items():\n",
        "    print(f\"\\nCross-tabulation for {var}:\")\n",
        "    print(crosstab)"
      ],
      "metadata": {
        "id": "-ZQ4Qd8Nz00d",
        "collapsed": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "78a22912-3866-4e4c-de31-d496dcf6c716"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Cross-tabulation for MEM_GENDER_x:\n",
            "MEM_GENDER_x       F       M\n",
            "Cluster                     \n",
            "0             220058  204454\n",
            "1                 15       8\n",
            "\n",
            "Cross-tabulation for MEM_RACE_x:\n",
            "MEM_RACE_x   1.0    2.0    3.0     4.0\n",
            "Cluster                               \n",
            "0           3980  16684  41355  362493\n",
            "1              0      0      3      20\n",
            "\n",
            "Cross-tabulation for PAYER_LOB_x:\n",
            "PAYER_LOB_x  COMMERCIAL  MEDICAID  MEDICARE  MEDICARE SUPPLEMENT\n",
            "Cluster                                                         \n",
            "0                209536    180930     25158                 8888\n",
            "1                    12         6         3                    2\n",
            "\n",
            "Cross-tabulation for SV_STAT:\n",
            "SV_STAT     D       P\n",
            "Cluster              \n",
            "0        2765  421747\n",
            "1           2      21\n",
            "\n",
            "Cross-tabulation for RELATION:\n",
            "RELATION  DEPENDENT  SPOUSE  SUBSCRIBER  UNKNOWN\n",
            "Cluster                                         \n",
            "0              6371    2428      405452    10261\n",
            "1                 3       2          12        6\n",
            "\n",
            "Cross-tabulation for SERVICE_SETTING:\n",
            "SERVICE_SETTING  INPATIENT  OTHER  OUTPATIENT  PROFESSIONAL\n",
            "Cluster                                                    \n",
            "0                       24   8088        4989        411411\n",
            "1                        1      0          16             6\n",
            "\n",
            "Cross-tabulation for DIAGNOSTIC_CONDITION_CATEGORY_DESC:\n",
            "DIAGNOSTIC_CONDITION_CATEGORY_DESC  ADHD  ALZHEIMER'S DISEASE  ASTHMA  \\\n",
            "Cluster                                                                 \n",
            "0                                    597                   32     894   \n",
            "1                                      0                    0       1   \n",
            "\n",
            "DIAGNOSTIC_CONDITION_CATEGORY_DESC  ATRIAL FIBRILLATION  AUTISM  BLINDNESS  \\\n",
            "Cluster                                                                      \n",
            "0                                                   153     420         71   \n",
            "1                                                     0       0          0   \n",
            "\n",
            "DIAGNOSTIC_CONDITION_CATEGORY_DESC  CARDIAC DYSRHYTHMIA  CATARACT  \\\n",
            "Cluster                                                             \n",
            "0                                                   348         3   \n",
            "1                                                     0         0   \n",
            "\n",
            "DIAGNOSTIC_CONDITION_CATEGORY_DESC  CEREBROVASCULAR DISEASES  \\\n",
            "Cluster                                                        \n",
            "0                                                        204   \n",
            "1                                                          0   \n",
            "\n",
            "DIAGNOSTIC_CONDITION_CATEGORY_DESC  CHRONIC MUSCULAR SKELETAL CONDITIONS  ...  \\\n",
            "Cluster                                                                   ...   \n",
            "0                                                                    298  ...   \n",
            "1                                                                      1  ...   \n",
            "\n",
            "DIAGNOSTIC_CONDITION_CATEGORY_DESC  SEVERE DEMENTIA  SLEEP DISORDERS  \\\n",
            "Cluster                                                                \n",
            "0                                               165              257   \n",
            "1                                                 0                0   \n",
            "\n",
            "DIAGNOSTIC_CONDITION_CATEGORY_DESC  SPINAL DEFORMITY  SUBSTANCE ABUSE  \\\n",
            "Cluster                                                                 \n",
            "0                                                 63             1937   \n",
            "1                                                  0                2   \n",
            "\n",
            "DIAGNOSTIC_CONDITION_CATEGORY_DESC  SYSTEMIC CONNECTIVE TISSUE DISORDERS  \\\n",
            "Cluster                                                                    \n",
            "0                                                                     42   \n",
            "1                                                                      1   \n",
            "\n",
            "DIAGNOSTIC_CONDITION_CATEGORY_DESC  THYROID DISEASE  TUBERCULOSIS  \\\n",
            "Cluster                                                             \n",
            "0                                               595            31   \n",
            "1                                                 0             0   \n",
            "\n",
            "DIAGNOSTIC_CONDITION_CATEGORY_DESC  TYPE 1 DIABETES  TYPE 2 DIABETES  \\\n",
            "Cluster                                                                \n",
            "0                                               129             2675   \n",
            "1                                                 0                0   \n",
            "\n",
            "DIAGNOSTIC_CONDITION_CATEGORY_DESC  VIRAL HEPATITIS (CHRONIC)  \n",
            "Cluster                                                        \n",
            "0                                                          69  \n",
            "1                                                           0  \n",
            "\n",
            "[2 rows x 69 columns]\n",
            "\n",
            "Cross-tabulation for CPT_CCS_LABEL:\n",
            "CPT_CCS_LABEL  ABDOMINAL PARACENTESIS  \\\n",
            "Cluster                                 \n",
            "0                                   2   \n",
            "1                                   0   \n",
            "\n",
            "CPT_CCS_LABEL  ALCOHOL AND DRUG MANAGEMENT, TREATMENT, AND REHABILITATION  \\\n",
            "Cluster                                                                     \n",
            "0                                                            526            \n",
            "1                                                              1            \n",
            "\n",
            "CPT_CCS_LABEL  AMPUTATION OF LOWER EXTREMITY  ANCILLARY SERVICES  ANESTHESIA  \\\n",
            "Cluster                                                                        \n",
            "0                                          1                2121          44   \n",
            "1                                          0                   0           0   \n",
            "\n",
            "CPT_CCS_LABEL  APPENDECTOMY  ARTERIO- OR VENOGRAM (NOT HEART AND HEAD)  \\\n",
            "Cluster                                                                  \n",
            "0                         1                                          1   \n",
            "1                         0                                          0   \n",
            "\n",
            "CPT_CCS_LABEL  ARTHROCENTESIS  ARTHROPLASTY KNEE  \\\n",
            "Cluster                                            \n",
            "0                         113                  9   \n",
            "1                           0                  1   \n",
            "\n",
            "CPT_CCS_LABEL  ARTHROPLASTY OTHER THAN HIP OR KNEE  ...  \\\n",
            "Cluster                                             ...   \n",
            "0                                                4  ...   \n",
            "1                                                0  ...   \n",
            "\n",
            "CPT_CCS_LABEL  TRACTION, SPLINTS, AND OTHER WOUND CARE  \\\n",
            "Cluster                                                  \n",
            "0                                                   54   \n",
            "1                                                    0   \n",
            "\n",
            "CPT_CCS_LABEL  TRANSPORTATION - PATIENT, PROVIDER, EQUIPMENT  \\\n",
            "Cluster                                                        \n",
            "0                                                        135   \n",
            "1                                                          0   \n",
            "\n",
            "CPT_CCS_LABEL  TRANSURETHRAL RESECTION OF PROSTATE (TURP)  \\\n",
            "Cluster                                                     \n",
            "0                                                       1   \n",
            "1                                                       0   \n",
            "\n",
            "CPT_CCS_LABEL  TREATMENT, FRACTURE OR DISLOCATION OF HIP AND FEMUR  \\\n",
            "Cluster                                                              \n",
            "0                                                              1     \n",
            "1                                                              0     \n",
            "\n",
            "CPT_CCS_LABEL  TREATMENT, FRACTURE OR DISLOCATION OF LOWER EXTREMITY (OTHER THAN HIP OR FEMUR)  \\\n",
            "Cluster                                                                                          \n",
            "0                                                              1                                 \n",
            "1                                                              1                                 \n",
            "\n",
            "CPT_CCS_LABEL  UPPER GASTROINTESTINAL ENDOSCOPY, BIOPSY  \\\n",
            "Cluster                                                   \n",
            "0                                                    72   \n",
            "1                                                     0   \n",
            "\n",
            "CPT_CCS_LABEL  UPPER GASTROINTESTINAL X-RAY  URETERAL CATHETERIZATION  \\\n",
            "Cluster                                                                 \n",
            "0                                         1                         1   \n",
            "1                                         0                         0   \n",
            "\n",
            "CPT_CCS_LABEL  VARICOSE VEIN STRIPPING, LOWER LIMB  \\\n",
            "Cluster                                              \n",
            "0                                                3   \n",
            "1                                                0   \n",
            "\n",
            "CPT_CCS_LABEL  VISUAL AIDS AND OTHER OPTICAL SUPPLIES  \n",
            "Cluster                                                \n",
            "0                                                 144  \n",
            "1                                                   0  \n",
            "\n",
            "[2 rows x 170 columns]\n",
            "\n",
            "Cross-tabulation for LABEL_GROUP_COST:\n",
            "LABEL_GROUP_COST  High spend  Low spend  Medium spend\n",
            "Cluster                                              \n",
            "0                     397674      15612         11226\n",
            "1                         22          1             0\n",
            "\n",
            "Cross-tabulation for FAMILIA_CID:\n",
            "FAMILIA_CID  A04  A08  A09  A15  A32  A40  A41  A51  A53  A60  ...  Z90  Z91  \\\n",
            "Cluster                                                        ...             \n",
            "0              7    7    6    5    1    1   29    1    1    2  ...    4   16   \n",
            "1              0    0    0    0    0    0    0    0    0    0  ...    0    0   \n",
            "\n",
            "FAMILIA_CID  Z92  Z93  Z94  Z95  Z96  Z97  Z98  Z99  \n",
            "Cluster                                              \n",
            "0              2   19   15   99    9    1   23    6  \n",
            "1              0    0    0    0    0    0    0    0  \n",
            "\n",
            "[2 rows x 1014 columns]\n",
            "\n",
            "Cross-tabulation for AGE_CATEGORY:\n",
            "AGE_CATEGORY   0-18  18-60     60+\n",
            "Cluster                           \n",
            "0             10069  16335  398108\n",
            "1                 1     13       9\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from scipy.stats import f_oneway, chi2_contingency\n",
        "\n",
        "# 1. Compute p-values for numeric variables (ANOVA)\n",
        "anova_results = {}\n",
        "for var in numeric_vars:\n",
        "    grouped = [df_final[df_final[\"Cluster\"] == cluster][var] for cluster in df_final[\"Cluster\"].unique()]\n",
        "    _, p_value = f_oneway(*grouped)\n",
        "    anova_results[var] = round(p_value, 6)  # Round to 6 decimal places\n",
        "\n",
        "# 2. Compute p-values for categorical variables (Chi-Square)\n",
        "chi2_results = {}\n",
        "for var in categorical_vars:\n",
        "    contingency_table = pd.crosstab(df_final[\"Cluster\"], df_final[var])\n",
        "    _, p_value, _, _ = chi2_contingency(contingency_table)\n",
        "    chi2_results[var] = round(p_value, 6)  # Round to 6 decimal places\n",
        "\n",
        "# Combine results\n",
        "p_values = {**anova_results, **chi2_results}\n",
        "\n",
        "# Display results as a list\n",
        "print(\"P-values for comparisons between Clusters and Variables:\")\n",
        "for var, p_val in p_values.items():\n",
        "    print(f\"{var}: {p_val}\")\n"
      ],
      "metadata": {
        "id": "dvVqifsBoV0f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a10a06f8-b70a-4736-c6da-61a6bf2738c5"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scipy/stats/_axis_nan_policy.py:531: ConstantInputWarning: Each of the input arrays is constant; the F statistic is not defined or infinite\n",
            "  res = hypotest_fun_out(*samples, **kwds)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "P-values for comparisons between Clusters and Variables:\n",
            "RX_DRUG_COST: nan\n",
            "AMT_BILLED: 0.0\n",
            "AMT_PAID: 0.0\n",
            "GROUP_COST: 0.877104\n",
            "AGE_ON_DOS: 0.0\n",
            "MEM_AGE: 0.006119\n",
            "MEM_GENDER_x: 0.282155\n",
            "MEM_RACE_x: 0.709399\n",
            "PAYER_LOB_x: 0.040847\n",
            "SV_STAT: 0.000468\n",
            "RELATION: 0.0\n",
            "SERVICE_SETTING: 0.0\n",
            "DIAGNOSTIC_CONDITION_CATEGORY_DESC: 0.0\n",
            "CPT_CCS_LABEL: 0.0\n",
            "LABEL_GROUP_COST: 0.724017\n",
            "FAMILIA_CID: 0.0\n",
            "AGE_CATEGORY: 0.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(type(df_encoded))  # Deve ser pandas.DataFrame ou numpy.ndarray\n",
        "print(df_encoded.shape)  # Confirme o número de linhas e colunas\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6Jgs2OR0ajr2",
        "outputId": "c2dd12e4-f776-48e2-af4a-5ee1faa4d49a"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "(424535, 18)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#from sklearn.cluster import KMeans\n",
        "#import matplotlib.pyplot as plt\n",
        "\n",
        "# Calcular inércia para diferentes números de clusters\n",
        "#inertia = []\n",
        "#K = range(1, 10)  # Testar de 1 a 10 clusters\n",
        "#for k in K:\n",
        "#    kmeans = KMeans(n_clusters=k, random_state=42)\n",
        "#    kmeans.fit(df_final)\n",
        "#    inertia.append(kmeans.inertia_)\n",
        "\n",
        "# Plotar o gráfico do método do cotovelo\n",
        "#plt.figure(figsize=(8, 5))\n",
        "#plt.plot(K, inertia, 'bx-')\n",
        "#plt.xlabel('Número de Clusters (k)')\n",
        "#plt.ylabel('Inércia')\n",
        "#plt.title('Método do Cotovelo para Determinar k Ideal')\n",
        "#plt.show()\n"
      ],
      "metadata": {
        "id": "GsInSc_t13Jq"
      },
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.decomposition import PCA\n",
        "\n",
        "# Reduzir para 2 componentes principais\n",
        "#pca = PCA(n_components=2)\n",
        "#principal_components = pca.fit_transform(df_final)\n",
        "\n",
        "# Plotar os clusters atuais\n",
        "#plt.figure(figsize=(8, 6))\n",
        "#plt.scatter(principal_components[:, 0], principal_components[:, 1], cmap=\"viridis\", s=50)\n",
        "#plt.title('Visualização dos Clusters com PCA')\n",
        "#plt.xlabel('Componente Principal 1')\n",
        "#plt.ylabel('Componente Principal 2')\n",
        "#plt.colorbar(label='Cluster')\n",
        "#plt.show()\n"
      ],
      "metadata": {
        "id": "U9Nl7hhq2sal"
      },
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Exportar dados"
      ],
      "metadata": {
        "id": "nZCLds-bvXmc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "crosstab_data = {}\n",
        "for var in categorical_vars:\n",
        "    crosstab = pd.crosstab(df_final[\"Cluster\"], df_final[var])\n",
        "    crosstab_data[var] = crosstab.to_dict()\n"
      ],
      "metadata": {
        "id": "1Piajtojvf7P"
      },
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "numeric_means = df_final.groupby(\"Cluster\")[numeric_vars].mean().to_dict()\n"
      ],
      "metadata": {
        "id": "G79FbB2rv8vj"
      },
      "execution_count": 38,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import json\n",
        "\n",
        "# Dados do JSON\n",
        "clusters_list = {\n",
        "    \"0\": \"Paciente com baixo risco de gasto\",\n",
        "    \"1\": \"Paciente com alto risco de gasto\"\n",
        "}\n",
        "\n",
        "json_data = {\n",
        "    \"clusters\": clusters_list,\n",
        "    \"crosstab\": crosstab_data,\n",
        "    \"numeric_means\": numeric_means\n",
        "}\n",
        "\n",
        "# Salvar no JSON\n",
        "with open(\"cluster_data.json\", \"w\") as f:\n",
        "    json.dump(json_data, f, indent=4)\n"
      ],
      "metadata": {
        "id": "9quZdRmUwHqV"
      },
      "execution_count": 39,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Streamlite Vision"
      ],
      "metadata": {
        "id": "EYvhMAXhowQ0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import plotly.express as px\n",
        "!pip install streamlit\n",
        "import streamlit as st"
      ],
      "metadata": {
        "id": "jdnOKUgopAyt",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fc87a4fc-60a0-413b-c631-ee2e23197335"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting streamlit\n",
            "  Downloading streamlit-1.41.0-py2.py3-none-any.whl.metadata (8.5 kB)\n",
            "Requirement already satisfied: altair<6,>=4.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (4.2.2)\n",
            "Requirement already satisfied: blinker<2,>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (1.9.0)\n",
            "Requirement already satisfied: cachetools<6,>=4.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (5.5.0)\n",
            "Requirement already satisfied: click<9,>=7.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (8.1.7)\n",
            "Requirement already satisfied: numpy<3,>=1.23 in /usr/local/lib/python3.10/dist-packages (from streamlit) (1.26.4)\n",
            "Requirement already satisfied: packaging<25,>=20 in /usr/local/lib/python3.10/dist-packages (from streamlit) (24.2)\n",
            "Requirement already satisfied: pandas<3,>=1.4.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (2.2.2)\n",
            "Requirement already satisfied: pillow<12,>=7.1.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (11.0.0)\n",
            "Requirement already satisfied: protobuf<6,>=3.20 in /usr/local/lib/python3.10/dist-packages (from streamlit) (4.25.5)\n",
            "Requirement already satisfied: pyarrow>=7.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (17.0.0)\n",
            "Requirement already satisfied: requests<3,>=2.27 in /usr/local/lib/python3.10/dist-packages (from streamlit) (2.32.3)\n",
            "Requirement already satisfied: rich<14,>=10.14.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (13.9.4)\n",
            "Requirement already satisfied: tenacity<10,>=8.1.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (9.0.0)\n",
            "Requirement already satisfied: toml<2,>=0.10.1 in /usr/local/lib/python3.10/dist-packages (from streamlit) (0.10.2)\n",
            "Requirement already satisfied: typing-extensions<5,>=4.3.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (4.12.2)\n",
            "Collecting watchdog<7,>=2.1.5 (from streamlit)\n",
            "  Downloading watchdog-6.0.0-py3-none-manylinux2014_x86_64.whl.metadata (44 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m44.3/44.3 kB\u001b[0m \u001b[31m2.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: gitpython!=3.1.19,<4,>=3.0.7 in /usr/local/lib/python3.10/dist-packages (from streamlit) (3.1.43)\n",
            "Collecting pydeck<1,>=0.8.0b4 (from streamlit)\n",
            "  Downloading pydeck-0.9.1-py2.py3-none-any.whl.metadata (4.1 kB)\n",
            "Requirement already satisfied: tornado<7,>=6.0.3 in /usr/local/lib/python3.10/dist-packages (from streamlit) (6.3.3)\n",
            "Requirement already satisfied: entrypoints in /usr/local/lib/python3.10/dist-packages (from altair<6,>=4.0->streamlit) (0.4)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from altair<6,>=4.0->streamlit) (3.1.4)\n",
            "Requirement already satisfied: jsonschema>=3.0 in /usr/local/lib/python3.10/dist-packages (from altair<6,>=4.0->streamlit) (4.23.0)\n",
            "Requirement already satisfied: toolz in /usr/local/lib/python3.10/dist-packages (from altair<6,>=4.0->streamlit) (0.12.1)\n",
            "Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.10/dist-packages (from gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.11)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas<3,>=1.4.0->streamlit) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas<3,>=1.4.0->streamlit) (2024.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas<3,>=1.4.0->streamlit) (2024.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.27->streamlit) (3.4.0)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.27->streamlit) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.27->streamlit) (2.2.3)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.27->streamlit) (2024.8.30)\n",
            "Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.10/dist-packages (from rich<14,>=10.14.0->streamlit) (3.0.0)\n",
            "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from rich<14,>=10.14.0->streamlit) (2.18.0)\n",
            "Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.10/dist-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit) (5.0.1)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->altair<6,>=4.0->streamlit) (3.0.2)\n",
            "Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (24.2.0)\n",
            "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (2024.10.1)\n",
            "Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.35.1)\n",
            "Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.22.3)\n",
            "Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.10/dist-packages (from markdown-it-py>=2.2.0->rich<14,>=10.14.0->streamlit) (0.1.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas<3,>=1.4.0->streamlit) (1.16.0)\n",
            "Downloading streamlit-1.41.0-py2.py3-none-any.whl (23.4 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m23.4/23.4 MB\u001b[0m \u001b[31m60.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading pydeck-0.9.1-py2.py3-none-any.whl (6.9 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.9/6.9 MB\u001b[0m \u001b[31m84.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading watchdog-6.0.0-py3-none-manylinux2014_x86_64.whl (79 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m79.1/79.1 kB\u001b[0m \u001b[31m5.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: watchdog, pydeck, streamlit\n",
            "Successfully installed pydeck-0.9.1 streamlit-1.41.0 watchdog-6.0.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "clusters_list = {\n",
        "    \"0\": \"Paciente com baixo risco de gasto\",\n",
        "    \"1\": \"Paciente com alto risco de gasto\"\n",
        "}"
      ],
      "metadata": {
        "id": "4K9JkoBW-izp"
      },
      "execution_count": 43,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "cluster_group = clusters_list.get(str(df_final[\"Cluster\"].iloc[0]), \"Cluster desconhecido\")\n",
        "cluster_group"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZafWVwiQ-57A",
        "outputId": "ef8a100f-8edf-4984-fdf7-a8d01c58058f"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'Paciente com baixo risco de gasto'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cluster_group = st.sidebar.selectbox('What is the patient group?', cluster_group)\n",
        "\n",
        "colunas = ['AMT_BILLED','AGE_ON_DOS']\n",
        "column = st.sidebar.selectbox('What type of information', colunas)\n",
        "\n",
        "\n",
        "fig = px.histogram (df_final, y=column, title=column + cluster_group )\n",
        "fig.update_layout( yaxis_title=column.upper(), title = {'x':0.5})\n",
        "\n",
        "st.title('Patient Age and Spending, Hawaii 2024')\n",
        "st.write('In this application, the user has the option of choosing the type of information to display the graph. Use the side menu to change the display.')\n",
        "st.plotly_chart(fig, use_container_width=True)\n",
        "\n"
      ],
      "metadata": {
        "id": "TF-p5SngE0ib",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "eb73d2cc-cd2f-4bfb-ee23-02dd1de8ddd7"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "2024-12-11 14:32:49.399 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-12-11 14:32:49.401 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-12-11 14:32:49.404 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-12-11 14:32:49.406 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-12-11 14:32:49.407 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-12-11 14:32:49.409 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-12-11 14:32:49.411 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-12-11 14:32:49.412 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-12-11 14:32:49.413 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-12-11 14:32:49.415 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-12-11 14:32:49.416 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-12-11 14:32:49.418 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-12-11 14:32:49.474 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-12-11 14:32:49.475 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-12-11 14:32:49.478 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-12-11 14:32:49.479 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-12-11 14:32:49.480 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-12-11 14:32:49.481 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-12-11 14:32:49.527 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-12-11 14:32:49.530 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-12-11 14:32:49.549 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-12-11 14:32:49.552 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DeltaGenerator()"
            ]
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    }
  ]
}